#!/usr/bin/env python3

#---------------Import Libraries and msgs---------------:

import rospy
from robot_control_simulation.srv import * #response msg type
import time
import math
import numpy as np
from std_msgs.msg import *
from geometry_msgs.msg import *
import tf2_msgs.msg
from tf.transformations import euler_from_quaternion
from collections import Counter

#---------------Define Functions---------------:

#Get current pose from the /tf topic
def get_pose():
	#print("Getting pose")
	
	#work around to bad pose readout
	pose_list = []
	x_list = [] #We will round and store the X coordinate of each pose, to compare them
	for i in range(8): #work around to bug
		message = rospy.wait_for_message('/tf', tf2_msgs.msg.TFMessage) #Connects to topic, waits for one message and returns it
		pose = message.transforms[-1].transform #From the last message in the list, get out just the transforms
		pose_list.append(pose)
		x_list.append(round(pose.translation.x, 2)) #round to make it easier to compare them
	common_x = Counter(x_list).most_common(1)[0]
	if common_x[1] == len(pose_list): #check if all our poses had the same x, if they did just use the latest
		pose = pose_list[-1]
	else:
		#print("A bad readout has occured,", len(pose_list) - common_x[1],"/", len(pose_list), "were bad")
		#print("X positions:",x_list)
		pose_index = x_list.index(common_x[0])
		pose = pose_list[pose_index]
	
	#convert from tf2msg to geometry msg pose
	my_pose = Pose()
	my_pose.position = pose.translation
	my_pose.orientation = pose.rotation
	#print("Pose gotten")
	return my_pose

#Call the service ball_traj and send out pose to it
def check_errors(robot_pose):
	print("waiting for service")
	rospy.wait_for_service('ball_traj')
	try:
		my_ball_traj = rospy.ServiceProxy('ball_traj', ball_traj)
		errors = my_ball_traj(robot_pose)
		return errors
	except rospy.ServiceException as e:
		print("Service call failed: %s"%e)

#---------------Initialise---------------:
print("Please Wait While System Starts Up...")
rospy.init_node("example_node", anonymous = False)
ur_script_pub = rospy.Publisher('/ur_hardware_interface/script_command', String, queue_size=10) #connect to topic that takes urscripts
time.sleep(2) # Give code time to connect and initialise before we do anything
print("System Started")

#---------------Main Code---------------:

#get current pose
my_pose = get_pose()

#Get errors out
errors = check_errors(my_pose)

print("Cartesian error:", (errors.ee_trans_error),"m") #Directional error in meters
print("Orientational error:", errors.ee_rot_error, "degrees") #Rotational error in degrees
print("Ball caught:",errors.ball_caught) #Boolean tell that tells us if the ball was caught or not








