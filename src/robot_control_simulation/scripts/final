#!/usr/bin/env python3

#---------------Import Libraries and msgs---------------:
import rospy
from robot_control_simulation.srv import * #response msg type
import time
import math
import numpy as np
from std_msgs.msg import *
from geometry_msgs.msg import *
import tf2_msgs.msg
from tf.transformations import euler_from_quaternion
from collections import Counter
#https://www.universal-robots.com/articles/ur/application-installation/what-is-a-singularity/
#---------------Define Variables---------------:

#Move J's are faster, since precision isn't the goal
max_acc = 0.5
max_vel = 0.5
header = "def myProg():"
footer = "\nend"

#---------------Define Functions---------------:

#Get current pose from the /tf topic
def get_pose():
	#print("Getting pose")

	#work around to bad pose readout
	pose_list = []
	x_list = [] #We will round and store the X coordinate of each pose, to compare them
	for i in range(5): #work around to bug
		message = rospy.wait_for_message('/tf', tf2_msgs.msg.TFMessage) #Connects to topic, waits for one message and returns it
		pose = message.transforms[-1].transform #From the last message in the list, get out just the transforms
		pose_list.append(pose)
		x_list.append(round(pose.translation.x, 2)) #round to make it easier to compare them
	common_x = Counter(x_list).most_common(1)[0]
	if common_x[1] == len(pose_list): #check if all our poses had the same x, if they did just use the latest
		pose = pose_list[-1]
	else:
		#print("A bad readout has occured")
		pose_index = x_list.index(common_x[0])
		pose = pose_list[pose_index]

	#convert from tf2msg to geometry msg pose
	my_pose = Pose()
	my_pose.position = pose.translation
	my_pose.orientation = pose.rotation
	#print("Pose gotten")
	return my_pose

def check_errors(robot_pose):
	#print("Waiting for service...")
	rospy.wait_for_service('ball_traj')
	try:
		#print("Service is running. Checking error!")
		my_ball_traj = rospy.ServiceProxy('ball_traj', ball_traj)
		errors = my_ball_traj(robot_pose)
		return errors
	except rospy.ServiceException as e:
		print("Service call failed: %s"%e)

#Takes a quaternion and converts the wxyz into rx ry rz
def convert_to_euler(quat):
	x = quat.x
	y = quat.y
	z =  quat.z
	w =  quat.w
	my_quat = [x,y,z,w] #Euler from quat needs them in this order, and in a list
	(roll, pitch, yaw) = euler_from_quaternion(my_quat)

	yawMatrix = np.matrix([
	[math.cos(yaw), -math.sin(yaw), 0],
	[math.sin(yaw), math.cos(yaw), 0],
	[0, 0, 1]
	])

	pitchMatrix = np.matrix([
	[math.cos(pitch), 0, math.sin(pitch)],
	[0, 1, 0],
	[-math.sin(pitch), 0, math.cos(pitch)]
	])

	rollMatrix = np.matrix([
	[1, 0, 0],
	[0, math.cos(roll), -math.sin(roll)],
	[0, math.sin(roll), math.cos(roll)]
	])

	R = yawMatrix * pitchMatrix * rollMatrix

	theta = math.acos(((R[0, 0] + R[1, 1] + R[2, 2]) - 1) / 2)
	multi = 1 / (2 * math.sin(theta))

	rx = multi * (R[2, 1] - R[1, 2]) * theta
	ry = multi * (R[0, 2] - R[2, 0]) * theta
	rz = multi * (R[1, 0] - R[0, 1]) * theta
	return rx, ry, rz

def rotate_tool(rx, ry, rz):
	"""Function that rotates using tool frame instead of base frame, so we can easily rotate in angles we're familar with"""
	header = "def myProg():"
	footer = "\nend"
	command = """
	global pose_wrt_tool = p[{}, {}, {}, {}, {}, {}]
	global pose_wrt_base = pose_trans(get_forward_kin(), pose_wrt_tool)
	movel( pose_wrt_base, a={}, v={})""".format(0, 0, 0, rx, ry, rz, max_acc, max_vel)
	ur_script_pub.publish(header + command + footer)

def deg_to_rad(joint_angles):
	""" This is used to convert from degrees to radians. It's not really practical, it's just so i can select some degrees i want the robot to be in, then use this function so i can hard code those angles as radians quicker. """
	converted_angles = []
	for joint_angle in joint_angles:
		rad_angle = (joint_angle * (math.pi/180))
		converted_angles.append(rad_angle)
	return converted_angles

def home_robot():
	max_acc = 1.0
	max_vel = 1.0
	header = "def myProg():"
	footer = "\nend"
	home_waypoint = [-1, -1, -5, -1.57, 1.57, 1.57]
	move_msg ="\nmovej({},a={},v={},t={},r={})".format(home_waypoint, max_acc ,max_vel,0,0)
	move = header + move_msg + footer
	ur_script_pub.publish(move)
	return move

#Convert pose into command
def generate_command(pose):
	""" The URSIM-ROS drivers require us to send strings that it decodes and uses for data in it's inverse kinematics, so we convert our pose msg into a string before sending it off.
	It's good practise to use msgs when sending data around in ROS, instead of sending everything off as strings."""
	header = "def myProg():"
	footer = "\nend"
	x = pose.position.x
	y = pose.position.y
	z = pose.position.z
	rx, ry, rz = convert_to_euler(pose.orientation)
	pose_str = '['+str(x)+ ',' +str(y)+ ',' +str(z)+ ',' +str(rx)+ ',' +str(ry)+ ',' +str(rz) +']'
	command = header + '\n\tmovel(p{}, a={}, v={}, t=0, r=0)'.format(pose_str, max_acc, max_vel) + footer
	return command

def move_j_pose(pose):
	header = "def myProg():"
	footer = "\nend"
	x = pose.position.x
	y = pose.position.y
	z = pose.position.z
	rx, ry, rz = convert_to_euler(pose.orientation)
	pose_str = '['+str(x)+ ',' +str(y)+ ',' +str(z)+ ',' +str(rx)+ ',' +str(ry)+ ',' +str(rz) +']'
	command = header + '\n\tmovej(p{}, a={}, v={}, t=0, r=0)'.format(pose_str, max_acc, max_vel) + footer
	return command

#---------------move l definition---------------:
def move_l_return_error(axis, value):
	#print("In definition now, calculating")
	initial_pose = get_pose()
	if axis == "x":
		initial_pose.position.x += value
	elif axis == "y":
		initial_pose.position.y += value
	elif axis == "z":
		initial_pose.position.z += value

	ur_script_pub.publish(generate_command(initial_pose))
	time.sleep(3)
	distance_error = (check_errors(initial_pose)).ee_trans_error
	return distance_error

#---------------move j definition---------------:
def move_j_return_error(axis, value):
	#print("In definition now, calculating")
	initial_pose = get_pose()
	if axis == "x":
		initial_pose.position.x += value
	elif axis == "y":
		initial_pose.position.y += value
	elif axis == "z":
		initial_pose.position.z += value

	ur_script_pub.publish(move_j_pose(initial_pose))
	time.sleep(3)
	distance_error = (check_errors(initial_pose)).ee_trans_error
	return distance_error

def rotate_endeffector_return_error(moment, value):
	if moment == "roll":
		rotate_tool(value, 0, 0)
	elif moment == "pitch":
		rotate_tool(0, value, 0)
	elif moment == "yaw":
		rotate_tool(0, 0, value)

	rotation_error = (check_errors(get_pose())).ee_rot_error
	return rotation_error

#---------------Initialise---------------:
print("Please Wait While System Starts Up...")
rospy.init_node("example_node", anonymous = False)
ur_script_pub = rospy.Publisher('/ur_hardware_interface/script_command', String, queue_size=10) #connect to topic that takes urscripts
time.sleep(2) # Give code time to connect and initialise before we do anything
print("System Started")


#---------------main code---------------:
print("Main code is now running") 


#---------------move to home coordinates---------------:
home_robot()
time.sleep(5)

#---------------cartesian distance solution---------------:
initial_pose = get_pose()
errors = check_errors(initial_pose)
last_error = errors.ee_trans_error
ball_caught = errors.ball_caught
print("Cartesian error:", last_error ,"m") #Directional error in degrees
print("Ball caught:", ball_caught) #Boolean tell that tells us if the ball was caught or not


while ball_caught == False:
	while last_error >= 0.50:
		print("We are in the 0.5 loop")

		setup = ["z", 0.1], ["x", -0.2], ["y", -0.3]
		for i, item in enumerate(setup):
			new_error =  move_j_return_error(item[0], item[1])
			print("The new error with z+ is: ",  new_error)
			if new_error > last_error:
				new_error =  move_j_return_error(item[0], item[1]*(-2))
				print("The new error with z- is: ",  new_error)
				if new_error < last_error:
					last_error = new_error
			else:
				last_error = new_error
			if new_error > last_error:
				new_error =  move_j_return_error(item[0], item[1])
				last_error = new_error
				print("The new error after having returned to the previous correct position is: ",  new_error)	




	while last_error >= 0.15 and last_error < 0.50:
		print("We are in the 0.15 loop")

		setup = ["z", 0.05], ["x", -0.15], ["y", -0.15]
		for i, item in enumerate(setup):
			new_error =  move_j_return_error(item[0], item[1])
			print("The new error with z+ is: ",  new_error)
			if new_error > last_error:
				new_error =  move_j_return_error(item[0], item[1]*(-2))
				print("The new error with z- is: ",  new_error)
				if new_error < last_error:
					last_error = new_error
			else:
				last_error = new_error
			if new_error > last_error:
				new_error =  move_j_return_error(item[0], item[1])
				last_error = new_error
				print("The new error after having returned to the previous correct position is: ",  new_error)	



	while last_error >= 0.050 and last_error < 0.15:
		print("We are in the 0.05 loop")

		setup = ["z", 0.025], ["x", -0.025], ["y", -0.025]
		for i, item in enumerate(setup):
			new_error =  move_j_return_error(item[0], item[1])
			print("The new error with z+ is: ",  new_error)
			if new_error > last_error:
				new_error =  move_j_return_error(item[0], item[1]*(-2))
				print("The new error with z- is: ",  new_error)
				if new_error < last_error:
					last_error = new_error
			else:
				last_error = new_error
			if new_error > last_error:
				new_error =  move_j_return_error(item[0], item[1])
				last_error = new_error
				print("The new error after having returned to the previous correct position is: ",  new_error)	


		if new_error < 0.05:
			break
print("Ball has been caught")
