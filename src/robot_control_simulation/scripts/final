#!/usr/bin/env python3

#---------------Import Libraries and msgs---------------:
import rospy
from robot_control_simulation.srv import * #response msg type
import time
import math
import numpy as np
from std_msgs.msg import *
from geometry_msgs.msg import *
import tf2_msgs.msg
from tf.transformations import euler_from_quaternion
from collections import Counter
#https://www.universal-robots.com/articles/ur/application-installation/what-is-a-singularity/
#---------------Define Variables---------------:

#Move J's are faster, since precision isn't the goal
max_acc = 0.5
max_vel = 0.5
header = "def myProg():"
footer = "\nend"

#---------------Define Functions---------------:

#Get current pose from the /tf topic
def get_pose():
	#print("Getting pose")

	#work around to bad pose readout
	pose_list = []
	x_list = [] #We will round and store the X coordinate of each pose, to compare them
	for i in range(5): #work around to bug
		message = rospy.wait_for_message('/tf', tf2_msgs.msg.TFMessage) #Connects to topic, waits for one message and returns it
		pose = message.transforms[-1].transform #From the last message in the list, get out just the transforms
		pose_list.append(pose)
		x_list.append(round(pose.translation.x, 2)) #round to make it easier to compare them
	common_x = Counter(x_list).most_common(1)[0]
	if common_x[1] == len(pose_list): #check if all our poses had the same x, if they did just use the latest
		pose = pose_list[-1]
	else:
		#print("A bad readout has occured")
		pose_index = x_list.index(common_x[0])
		pose = pose_list[pose_index]

	#convert from tf2msg to geometry msg pose
	my_pose = Pose()
	my_pose.position = pose.translation
	my_pose.orientation = pose.rotation
	#print("Pose gotten")
	return my_pose

def check_errors(robot_pose):
	#print("Waiting for service...")
	rospy.wait_for_service('ball_traj')
	try:
		#print("Service is running. Checking error!")
		my_ball_traj = rospy.ServiceProxy('ball_traj', ball_traj)
		errors = my_ball_traj(robot_pose)
		return errors
	except rospy.ServiceException as e:
		print("Service call failed: %s"%e)

#Takes a quaternion and converts the wxyz into rx ry rz
def convert_to_euler(quat):
	x = quat.x
	y = quat.y
	z =  quat.z
	w =  quat.w
	my_quat = [x,y,z,w] #Euler from quat needs them in this order, and in a list
	(roll, pitch, yaw) = euler_from_quaternion(my_quat)

	yawMatrix = np.matrix([
	[math.cos(yaw), -math.sin(yaw), 0],
	[math.sin(yaw), math.cos(yaw), 0],
	[0, 0, 1]
	])

	pitchMatrix = np.matrix([
	[math.cos(pitch), 0, math.sin(pitch)],
	[0, 1, 0],
	[-math.sin(pitch), 0, math.cos(pitch)]
	])

	rollMatrix = np.matrix([
	[1, 0, 0],
	[0, math.cos(roll), -math.sin(roll)],
	[0, math.sin(roll), math.cos(roll)]
	])

	R = yawMatrix * pitchMatrix * rollMatrix

	theta = math.acos(((R[0, 0] + R[1, 1] + R[2, 2]) - 1) / 2)
	multi = 1 / (2 * math.sin(theta))

	rx = multi * (R[2, 1] - R[1, 2]) * theta
	ry = multi * (R[0, 2] - R[2, 0]) * theta
	rz = multi * (R[1, 0] - R[0, 1]) * theta
	return rx, ry, rz

def rotate_tool(rx, ry, rz):
	"""Function that rotates using tool frame instead of base frame, so we can easily rotate in angles we're familar with"""
	header = "def myProg():"
	footer = "\nend"
	command = """
	global pose_wrt_tool = p[{}, {}, {}, {}, {}, {}]
	global pose_wrt_base = pose_trans(get_forward_kin(), pose_wrt_tool)
	movel( pose_wrt_base, a={}, v={})""".format(0, 0, 0, rx, ry, rz, max_acc, max_vel)
	ur_script_pub.publish(header + command + footer)

def home_robot():
	max_acc = 1.0
	max_vel = 1.0
	header = "def myProg():"
	footer = "\nend"
	home_waypoint = [-1, -1, -5, -1.57, 1.57, 1.57]
	move_msg ="\nmovej({},a={},v={},t={},r={})".format(home_waypoint, max_acc ,max_vel,0,0)
	move = header + move_msg + footer
	ur_script_pub.publish(move)
	return move

#Convert pose into command
def generate_command(pose):
	""" The URSIM-ROS drivers require us to send strings that it decodes and uses for data in it's inverse kinematics, so we convert our pose msg into a string before sending it off.
	It's good practise to use msgs when sending data around in ROS, instead of sending everything off as strings."""
	header = "def myProg():"
	footer = "\nend"
	x = pose.position.x
	y = pose.position.y
	z = pose.position.z
	rx, ry, rz = convert_to_euler(pose.orientation)
	pose_str = '['+str(x)+ ',' +str(y)+ ',' +str(z)+ ',' +str(rx)+ ',' +str(ry)+ ',' +str(rz) +']'
	command = header + '\n\tmovel(p{}, a={}, v={}, t=0, r=0)'.format(pose_str, max_acc, max_vel) + footer
	return command

def move_j_pose(pose):
	header = "def myProg():"
	footer = "\nend"
	x = pose.position.x
	y = pose.position.y
	z = pose.position.z
	rx, ry, rz = convert_to_euler(pose.orientation)
	pose_str = '['+str(x)+ ',' +str(y)+ ',' +str(z)+ ',' +str(rx)+ ',' +str(ry)+ ',' +str(rz) +']'
	command = header + '\n\tmovej(p{}, a={}, v={}, t=0, r=0)'.format(pose_str, max_acc, max_vel) + footer
	return command

#---------------move l definition---------------:
def move_l_return_error(axis, value):
	#print("In definition now, calculating")
	initial_pose = get_pose()
	if axis == "x":
		initial_pose.position.x += value
	elif axis == "y":
		initial_pose.position.y += value
	elif axis == "z":
		initial_pose.position.z += value

	ur_script_pub.publish(generate_command(initial_pose))
	time.sleep(3)
	distance_error = (check_errors(initial_pose)).ee_trans_error
	return distance_error

#---------------move j definition---------------:
def move_j_return_error(axis, value):
	#print("In definition now, calculating")
	initial_pose = get_pose()
	if axis == "x":
		initial_pose.position.x += value
	elif axis == "y":
		initial_pose.position.y += value
	elif axis == "z":
		initial_pose.position.z += value

	ur_script_pub.publish(move_j_pose(initial_pose))
	time.sleep(3)
	distance_error = (check_errors(initial_pose)).ee_trans_error
	return distance_error

def rotate_endeffector_return_error(moment, value):
	if moment == "roll":
		rotate_tool(value, 0, 0)
	elif moment == "pitch":
		rotate_tool(0, value, 0)
	elif moment == "yaw":
		rotate_tool(0, 0, value)

	rotation_error = (check_errors(get_pose())).ee_rot_error
	return rotation_error


def all_same(items):
    return all(x == items[0] for x in items)

#---------------Initialise---------------:
print("Please Wait While System Starts Up...")
rospy.init_node("example_node", anonymous = False)
ur_script_pub = rospy.Publisher('/ur_hardware_interface/script_command', String, queue_size=10) #connect to topic that takes urscripts
time.sleep(2) # Give code time to connect and initialise before we do anything
print("System Started")


#---------------main code---------------:
print("Main code is now running!") 


#---------------move to home coordinates---------------:
home_robot()
time.sleep(5)

#---------------cartesian distance solution---------------:
errors = check_errors(get_pose())
dist_error, ball_caught = errors.ee_trans_error, errors.ball_caught
rot_error = errors.ee_rot_error
print("\nCartesian error:", dist_error ,"m" 
	  "\nOrientational error:", rot_error, "degrees"
      "\nBall caught:", ball_caught )

setup = [[["z", 0.1, 0.50], ["x", -0.2, 0.50], ["y", -0.3, 0.50]], 
        [["z", 0.05, 0.15], ["x", -0.15, 0.15], ["y", -0.15, 0.15]], 
        [["z", 0.025, 0.05], ["x", -0.025, 0.05], ["y", -0.025, 0.05]]]

rot_values = []
values = [["pitch", 0.1],["yaw", -0.1],["roll", -0.1]]

while ball_caught == False:
	for val, cond in enumerate(setup):
		while dist_error >= cond[0+val][2]:
			for j, item in enumerate(setup[0+val]):
				print("\nCurrent loop:", cond[0+val][2], "- Axis:", item[0], "- Distance:", item[1])
				new_dist_error =  move_j_return_error(item[0], item[1])
				print("The new error with", item[0], "is: ",  new_dist_error)
				if new_dist_error > dist_error:
					new_dist_error =  move_j_return_error(item[0], item[1]*(-2))
					print("The new error with", item[0], "is: ",  new_dist_error) 
					if new_dist_error < dist_error: dist_error = new_dist_error 
				else: dist_error = new_dist_error
				if new_dist_error > dist_error:
					new_dist_error =  move_j_return_error(item[0], item[1])
					dist_error = new_dist_error
					print("Returned to the previous best position: ",  new_dist_error)	

			if dist_error < item[2]:
				print("I am exiting current loop!")
				break


#---------------actuator rotation solution---------------:
	for k, spec in enumerate(values):
		print("Current loop -", "- Axis:", spec[0], "- Angle Deviation:", spec[1])
		while rot_error >= 5:
			new_rot_error = rotate_endeffector_return_error(spec[0], spec[1])
			if new_rot_error > rot_error:
				new_rot_error = rotate_endeffector_return_error(spec[0], spec[1]*(-1))
				if new_rot_error < rot_error: rot_error = new_rot_error
			else:
				rot_error = new_rot_error
			rot_values.append(rot_error)
			print("Rotation error is: ", rot_error)

			if len(rot_values) > 4:
				if all_same(rot_values[-5:-1]): 
					rot_values.clear()
					break
		print("Exited the rotation while loop!")


	if dist_error < 0.05 and rot_error < 5.0: break
print("Ball was caught!")