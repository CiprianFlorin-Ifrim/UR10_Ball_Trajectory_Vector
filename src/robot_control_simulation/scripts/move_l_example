#!/usr/bin/env python3

#---------------Import Libraries and msgs---------------:

import rospy
import time
import math
import numpy as np
from std_msgs.msg import *
from geometry_msgs.msg import *
import tf2_msgs.msg
from tf.transformations import euler_from_quaternion
from collections import Counter

#---------------Set Global Variables---------------:


max_acc = 0.1
max_vel = 0.1


#---------------Define Functions---------------:


#Takes a quaternion and converts the wxyz into rx ry rz
def convert_to_euler(quat):
	x = quat.x
	y = quat.y
	z =  quat.z
	w =  quat.w
	my_quat = [x,y,z,w] #Euler from quat needs them in this order, and in a list
	(roll, pitch, yaw) = euler_from_quaternion(my_quat)

	yawMatrix = np.matrix([
	[math.cos(yaw), -math.sin(yaw), 0],
	[math.sin(yaw), math.cos(yaw), 0],
	[0, 0, 1]
	])

	pitchMatrix = np.matrix([
	[math.cos(pitch), 0, math.sin(pitch)],
	[0, 1, 0],
	[-math.sin(pitch), 0, math.cos(pitch)]
	])

	rollMatrix = np.matrix([
	[1, 0, 0],
	[0, math.cos(roll), -math.sin(roll)],
	[0, math.sin(roll), math.cos(roll)]
	])

	R = yawMatrix * pitchMatrix * rollMatrix

	theta = math.acos(((R[0, 0] + R[1, 1] + R[2, 2]) - 1) / 2)
	multi = 1 / (2 * math.sin(theta))

	rx = multi * (R[2, 1] - R[1, 2]) * theta
	ry = multi * (R[0, 2] - R[2, 0]) * theta
	rz = multi * (R[1, 0] - R[0, 1]) * theta
	return rx, ry, rz


#Get current pose from the /tf topic
def get_pose():
	#print("Getting pose")
	
	#work around to bad pose readout
	pose_list = []
	x_list = [] #We will round and store the X coordinate of each pose, to compare them
	for i in range(8): #work around to bug
		message = rospy.wait_for_message('/tf', tf2_msgs.msg.TFMessage) #Connects to topic, waits for one message and returns it
		pose = message.transforms[-1].transform #From the last message in the list, get out just the transforms
		pose_list.append(pose)
		x_list.append(round(pose.translation.x, 2)) #round to make it easier to compare them
	common_x = Counter(x_list).most_common(1)[0]
	if common_x[1] == len(pose_list): #check if all our poses had the same x, if they did just use the latest
		pose = pose_list[-1]
	else:
		#print("A bad readout has occured,", len(pose_list) - common_x[1],"/", len(pose_list), "were bad")
		#print("X positions:",x_list)
		pose_index = x_list.index(common_x[0])
		pose = pose_list[pose_index]
	
	#convert from tf2msg to geometry msg pose
	my_pose = Pose()
	my_pose.position = pose.translation
	my_pose.orientation = pose.rotation
	#print("Pose gotten")
	return my_pose


#Convert pose into command
def generate_command(pose):
	""" The URSIM-ROS drivers require us to send strings that it decodes and uses for data in it's inverse kinematics, so we convert our pose msg into a string before sending it off.
	It's good practise to use msgs when sending data around in ROS, instead of sending everything off as strings."""
	header = "def myProg():"
	footer = "\nend"
	x = pose.position.x
	y = pose.position.y
	z = pose.position.z
	rx, ry, rz = convert_to_euler(pose.orientation)
	pose_str = '['+str(x)+ ',' +str(y)+ ',' +str(z)+ ',' +str(rx)+ ',' +str(ry)+ ',' +str(rz) +']'
	command = header + '\n\tmovel(p{}, a={}, v={}, t=0, r=0)'.format(pose_str, max_acc, max_vel) + footer
	return command


#Have robot move to a set / default pose
def get_default_pose():
	#i just put some random orientation, so the end effector will be in some weird orientation, but this is just an example of how to do this.
	pose = Pose() 	#Make instance of pose msg
	pose.position.x = 0.27
	pose.position.y = -0.35
	pose.position.z = 0.14
	pose.orientation.w = 1
	pose.orientation.x = 0
	pose.orientation.y = 1
	pose.orientation.z = 0
	return(pose)

	
#---------------Initialise---------------:

print("Please Wait While System Starts Up...")
rospy.init_node("moving_linearly_example", anonymous = False)
ur_script_pub = rospy.Publisher('/ur_hardware_interface/script_command', String, queue_size=10)
time.sleep(2) # Give code time to connect and initialise before we do anything
print("System Started")

#print(get_pose())

#---------------Main Code---------------:


my_pos = get_pose()
#my_pos.position.x = my_pos.position.x - 0.1
my_pos.position.x += 0.1
command = generate_command(my_pos)
ur_script_pub.publish(command)


"""
#FIX DEFAULT POSE
#Move to a default position
default_pose = get_default_pose()
print()
print("Moving to starting pose")

ur_script_pub.publish(generate_command(default_pose))
time.sleep(5) #Wont be enough time if the UR is far from this pos initially
print("Done")
"""

"""
#Quick example of how to move in one axis
initial_pose = get_pose() 		#Get our current pose and store it as pose msg
print
print("Simple linear move in 1 axis:")
print"Initial Z: ",initial_pose.position.z
initial_pose.position.z -= 0.05 		#Get out just the current linear X position in relation to base frame
print"New Z: ",initial_pose.position.z	 	
ur_script_pub.publish(generate_command(initial_pose)) #In meters so 0.1 = 10cm
time.sleep(2) #Give command time to finish executing (Usually you have a function to check when the UR10 is free, and continue after that, but that's currently broken)
print("Done")
"""

"""
#Easy square (Bad coding convention)
print
print("Square coded line by line")
my_pose = get_pose()
#Move x+
my_pose.position.x += 0.1
ur_script_pub.publish(generate_command(my_pose))
time.sleep(2)
#Move y+
my_pose.position.y += 0.1
ur_script_pub.publish(generate_command(my_pose))
time.sleep(2)
#Move x-
my_pose.position.x -= 0.1
ur_script_pub.publish(generate_command(my_pose))
time.sleep(2)
#Move y-
my_pose.position.y -= 0.1
ur_script_pub.publish(generate_command(my_pose))
time.sleep(2)
print("Done")
"""

"""
#Square with loop
print
print("Square coded in loop")
my_pose = get_pose()
for corner in range(0,4): #Run 4x
	if(corner % 2): #ODD loop iterations (1,3) #Mod returns the remainder, if the number is even remainder == 0, so we can use it this way
		y = 0.1 if corner < 2 else -0.1	
		my_pose.position.y += y
	else: #EVEN loop iters (0,2)
		x = 0.1 if corner<1 else -0.1
		my_pose.position.x += x
	ur_script_pub.publish(generate_command(my_pose))
	time.sleep(3.5)
print("Done")
"""




















